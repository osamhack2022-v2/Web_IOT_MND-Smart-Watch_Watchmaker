ts();if(S._isStringArray(h)){const i=new Int32Array(h.length);for(let f=0,u=h.length;f<u;f++)i[f]=(0,m.stringHash)(h[f],0);return[h,i,!0]}return h instanceof Int32Array?[[],h,!1]:[[],new Int32Array(h),!1]}ElementsAreEqual(r,h){return this._originalElementsOrHash[r]!==this._modifiedElementsOrHash[h]?!1:this._hasStrings?this._originalStringElements[r]===this._modifiedStringElements[h]:!0}ElementsAreStrictEqual(r,h){if(!this.ElementsAreEqual(r,h))return!1;const i=S._getStrictElement(this._originalSequence,r),f=S._getStrictElement(this._modifiedSequence,h);return i===f}static _getStrictElement(r,h){return typeof r.getStrictElement=="function"?r.getStrictElement(h):null}OriginalElementsAreEqual(r,h){return this._originalElementsOrHash[r]!==this._originalElementsOrHash[h]?!1:this._hasStrings?this._originalStringElements[r]===this._originalStringElements[h]:!0}ModifiedElementsAreEqual(r,h){return this._modifiedElementsOrHash[r]!==this._modifiedElementsOrHash[h]?!1:this._hasStrings?this._modifiedStringElements[r]===this._modifiedStringElements[h]:!0}ComputeDiff(r){return this._ComputeDiff(0,this._originalElementsOrHash.length-1,0,this._modifiedElementsOrHash.length-1,r)}_ComputeDiff(r,h,i,f,u){const c=[!1];let n=this.ComputeDiffRecursive(r,h,i,f,c);return u&&(n=this.PrettifyChanges(n)),{quitEarly:c[0],changes:n}}ComputeDiffRecursive(r,h,i,f,u){for(u[0]=!1;r<=h&&i<=f&&this.ElementsAreEqual(r,i);)r++,i++;for(;h>=r&&f>=i&&this.ElementsAreEqual(h,f);)h--,f--;if(r>h||i>f){let o;return i<=f?(k.Assert(r===h+1,"originalStart should only be one more than originalEnd"),o=[new t.DiffChange(r,0,i,f-i+1)]):r<=h?(k.Assert(i===f+1,"modifiedStart should only be one more than modifiedEnd"),o=[new t.DiffChange(r,h-r+1,i,0)]):(k.Assert(r===h+1,"originalStart should only be one more than originalEnd"),k.Assert(i===f+1,"modifiedStart should only be one more than modifiedEnd"),o=[]),o}const c=[0],n=[0],l=this.ComputeRecursionPoint(r,h,i,f,c,n,u),s=c[0],a=n[0];if(l!==null)return l;if(!u[0]){const o=this.ComputeDiffRecursive(r,s,i,a,u);let g=[];return u[0]?g=[new t.DiffChange(s+1,h-(s+1)+1,a+1,f-(a+1)+1)]:g=this.ComputeDiffRecursive(s+1,h,a+1,f,u),this.ConcatenateChanges(o,g)}return[new t.DiffChange(r,h-r+1,i,f-i+1)]}WALKTRACE(r,h,i,f,u,c,n,l,s,a,o,g,d,v,p,E,D,y){let T=null,A=null,P=new b,_=h,O=i,N=d[0]-E[0]-f,M=-1073741824,F=this.m_forwardHistory.length-1;do{const V=N+r;V===_||V<O&&s[V-1]<s[V+1]?(o=s[V+1],v=o-N-f,o<M&&P.MarkNextChange(),M=o,P.AddModifiedElement(o+1,v),N=V+1-r):(o=s[V-1]+1,v=o-N-f,o<M&&P.MarkNextChange(),M=o-1,P.AddOriginalElement(o,v+1),N=V-1-r),F>=0&&(s=this.m_forwardHistory[F],r=s[0],_=1,O=s.length-1)}while(--F>=-1);if(T=P.getReverseChanges(),y[0]){let V=d[0]+1,W=E[0]+1;if(T!==null&&T.length>0){const x=T[T.length-1];V=Math.max(V,x.getOriginalEnd()),W=Math.max(W,x.getModifiedEnd())}A=[new t.DiffChange(V,g-V+1,W,p-W+1)]}else{P=new b,_=c,O=n,N=d[0]-E[0]-l,M=1073741824,F=D?this.m_reverseHistory.length-1:this.m_reverseHistory.length-2;do{const V=N+u;V===_||V<O&&a[V-1]>=a[V+1]?(o=a[V+1]-1,v=o-N-l,o>M&&P.MarkNextChange(),M=o+1,P.AddOriginalElement(o+1,v+1),N=V+1-u):(o=a[V-1],v=o-N-l,o>M&&P.MarkNextChange(),M=o,P.AddModifiedElement(o+1,v+1),N=V-1-u),F>=0&&(a=this.m_reverseHistory[F],u=a[0],_=1,O=a.length-1)}while(--F>=-1);A=P.getChanges()}return this.ConcatenateChanges(T,A)}ComputeRecursionPoint(r,h,i,f,u,c,n){let l=0,s=0,a=0,o=0,g=0,d=0;r--,i--,u[0]=0,c[0]=0,this.m_forwardHistory=[],this.m_reverseHistory=[];const v=h-r+(f-i),p=v+1,E=new Int32Array(p),D=new Int32Array(p),y=f-i,T=h-r,A=r-i,P=h-f,O=(T-y)%2===0;E[y]=r,D[T]=h,n[0]=!1;for(let N=1;N<=v/2+1;N++){let M=0,F=0;a=this.ClipDiagonalBound(y-N,N,y,p),o=this.ClipDiagonalBound(y+N,N,y,p);for(let W=a;W<=o;W+=2){W===a||W<o&&E[W-1]<E[W+1]?l=E[W+1]:l=E[W-1]+1,s=l-(W-y)-A;const x=l;for(;l<h&&s<f&&this.ElementsAreEqual(l+1,s+1);)l++,s++;if(E[W]=l,l+s>M+F&&(M=l,F=s),!O&&Math.abs(W-T)<=N-1&&l>=D[W])return u[0]=l,c[0]=s,x<=D[W]&&1447>0&&N<=1447+1?this.WALKTRACE(y,a,o,A,T,g,d,P,E,D,l,h,u,s,f,c,O,n):null}cons